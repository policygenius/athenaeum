// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Layout /> can create variant via props 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout bordered-buckets"
    style={undefined}
/>,
  "nodes": Array [
    <div
      className="layout bordered-buckets"
      style={undefined}
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Layout
        largeCols={Array []}
        mediumCols={Array []}
        smallCols={
                Array [
                        12,
                      ]
        }
        variant="bordered-buckets"
        xLargeCols={Array []}
        xxLargeCols={Array []}
/>,
      "_debugID": 6,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "largeCols": Array [],
          "mediumCols": Array [],
          "smallCols": Array [
            12,
          ],
          "variant": "bordered-buckets",
          "xLargeCols": Array [],
          "xxLargeCols": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="layout bordered-buckets"
          style={undefined}
/>,
        "_debugID": 7,
        "_renderedOutput": <div
          className="layout bordered-buckets"
          style={undefined}
/>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            12,
          ]
    }
    variant="bordered-buckets"
    xLargeCols={Array []}
    xxLargeCols={Array []}
/>,
}
`;

exports[`<Layout /> doesn't wrap Cols in \`<Col>\` 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        className="child"
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    />
</div>,
  "nodes": Array [
    <div
      className="layout"
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            className="child"
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Layout
        largeCols={Array []}
        mediumCols={Array []}
        smallCols={
                Array [
                        1,
                      ]
        }
        xLargeCols={Array []}
        xxLargeCols={Array []}
>
        <div
                className="child"
        />
        <Col
                borderColor="neutral-6"
                className="child"
        />
</Layout>,
      "_debugID": 12,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": Array [
            <div
              className="child"
/>,
            <Col
              borderColor="neutral-6"
              className="child"
/>,
          ],
          "largeCols": Array [],
          "mediumCols": Array [],
          "smallCols": Array [
            1,
          ],
          "xLargeCols": Array [],
          "xxLargeCols": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 4,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    className="child"
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          />
</div>,
        "_debugID": 13,
        "_renderedOutput": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    className="child"
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <Col
        borderColor="neutral-6"
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> passes its \`col\` props down to its \`<Col>\` correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout padding"
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing="xLarge"
        flex={undefined}
        fullwidth={true}
        largeCols={7}
        mediumCols={6}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing="xLarge"
        flex={undefined}
        fullwidth={true}
        largeCols={5}
        mediumCols={6}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout padding"
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing="xLarge"
            flex={undefined}
            fullwidth={true}
            largeCols={7}
            mediumCols={6}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing="xLarge"
            flex={undefined}
            fullwidth={true}
            largeCols={5}
            mediumCols={6}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Layout
        bottomSpacing="xLarge"
        fullwidth={true}
        largeCols={
                Array [
                        7,
                        5,
                      ]
        }
        mediumCols={
                Array [
                        6,
                      ]
        }
        padding={true}
        smallCols={
                Array [
                        1,
                      ]
        }
        xLargeCols={Array []}
        xxLargeCols={Array []}
>
        <div
                className="child"
        />
        <div
                className="child"
        />
</Layout>,
      "_debugID": 14,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "bottomSpacing": "xLarge",
          "children": Array [
            <div
              className="child"
/>,
            <div
              className="child"
/>,
          ],
          "fullwidth": true,
          "largeCols": Array [
            7,
            5,
          ],
          "mediumCols": Array [
            6,
          ],
          "padding": true,
          "smallCols": Array [
            1,
          ],
          "xLargeCols": Array [],
          "xxLargeCols": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 5,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="layout padding"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing="xLarge"
                    flex={undefined}
                    fullwidth={true}
                    largeCols={7}
                    mediumCols={6}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing="xLarge"
                    flex={undefined}
                    fullwidth={true}
                    largeCols={5}
                    mediumCols={6}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
        "_debugID": 15,
        "_renderedOutput": <div
          className="layout padding"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing="xLarge"
                    flex={undefined}
                    fullwidth={true}
                    largeCols={7}
                    mediumCols={6}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing="xLarge"
                    flex={undefined}
                    fullwidth={true}
                    largeCols={5}
                    mediumCols={6}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    bottomSpacing="xLarge"
    fullwidth={true}
    largeCols={
        Array [
            7,
            5,
          ]
    }
    mediumCols={
        Array [
            6,
          ]
    }
    padding={true}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> renders correctly 1`] = `
<div
  className="layout"
  style={undefined}
/>
`;

exports[`<Layout /> renders its children 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="some-child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="some-child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Layout
        largeCols={Array []}
        mediumCols={Array []}
        smallCols={
                Array [
                        1,
                      ]
        }
        xLargeCols={Array []}
        xxLargeCols={Array []}
>
        <div
                className="child"
        />
        <div
                className="some-child"
        />
        <div
                className="child"
        />
</Layout>,
      "_debugID": 8,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": Array [
            <div
              className="child"
/>,
            <div
              className="some-child"
/>,
            <div
              className="child"
/>,
          ],
          "largeCols": Array [],
          "mediumCols": Array [],
          "smallCols": Array [
            1,
          ],
          "xLargeCols": Array [],
          "xxLargeCols": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="some-child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
        "_debugID": 9,
        "_renderedOutput": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="some-child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="some-child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> wraps its child \`<Col>\` with column sizes 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={7}
        mediumCols={undefined}
        smallCols={12}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={5}
        mediumCols={undefined}
        smallCols={12}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={7}
            mediumCols={undefined}
            smallCols={12}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={5}
            mediumCols={undefined}
            smallCols={12}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Layout
        largeCols={
                Array [
                        7,
                        5,
                      ]
        }
        mediumCols={Array []}
        smallCols={
                Array [
                        12,
                      ]
        }
        xLargeCols={Array []}
        xxLargeCols={Array []}
>
        <div
                className="child"
        />
        <div
                className="child"
        />
</Layout>,
      "_debugID": 16,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": Array [
            <div
              className="child"
/>,
            <div
              className="child"
/>,
          ],
          "largeCols": Array [
            7,
            5,
          ],
          "mediumCols": Array [],
          "smallCols": Array [
            12,
          ],
          "xLargeCols": Array [],
          "xxLargeCols": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 6,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={7}
                    mediumCols={undefined}
                    smallCols={12}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={5}
                    mediumCols={undefined}
                    smallCols={12}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
        "_debugID": 17,
        "_renderedOutput": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={7}
                    mediumCols={undefined}
                    smallCols={12}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={5}
                    mediumCols={undefined}
                    smallCols={12}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={
        Array [
            7,
            5,
          ]
    }
    mediumCols={Array []}
    smallCols={
        Array [
            12,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> wraps its child \`<Col>\` with column sizes 2`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={3}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="one-off"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={3}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="one-off"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Layout
        largeCols={Array []}
        mediumCols={Array []}
        smallCols={
                Array [
                        1,
                      ]
        }
        xLargeCols={Array []}
        xxLargeCols={Array []}
>
        <div
                className="child"
        />
        <Col
                borderColor="neutral-6"
                smallCols={3}
        >
                <div
                        className="one-off"
                />
        </Col>
        <div
                className="child"
        />
</Layout>,
      "_debugID": 18,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": Array [
            <div
              className="child"
/>,
            <Col
              borderColor="neutral-6"
              smallCols={3}
>
              <div
                            className="one-off"
              />
</Col>,
            <div
              className="child"
/>,
          ],
          "largeCols": Array [],
          "mediumCols": Array [],
          "smallCols": Array [
            1,
          ],
          "xLargeCols": Array [],
          "xxLargeCols": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 7,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={3}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="one-off"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
        "_debugID": 19,
        "_renderedOutput": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={3}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="one-off"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <Col
        borderColor="neutral-6"
        smallCols={3}
    >
        <div
            className="one-off"
        />
    </Col>
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> wraps its children in \`<Col>\` 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Layout
        largeCols={Array []}
        mediumCols={Array []}
        smallCols={
                Array [
                        1,
                      ]
        }
        xLargeCols={Array []}
        xxLargeCols={Array []}
>
        <div
                className="child"
        />
        <div
                className="child"
        />
        <div
                className="child"
        />
</Layout>,
      "_debugID": 10,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": Array [
            <div
              className="child"
/>,
            <div
              className="child"
/>,
            <div
              className="child"
/>,
          ],
          "largeCols": Array [],
          "mediumCols": Array [],
          "smallCols": Array [
            1,
          ],
          "xLargeCols": Array [],
          "xxLargeCols": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
        "_debugID": 11,
        "_renderedOutput": <div
          className="layout"
          style={undefined}
>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
          <Col
                    borderColor="neutral-6"
                    bottomSpacing={undefined}
                    flex={undefined}
                    fullwidth={undefined}
                    largeCols={undefined}
                    mediumCols={undefined}
                    smallCols={1}
                    xLargeCols={undefined}
                    xxLargeCols={undefined}
          >
                    <div
                              className="child"
                    />
          </Col>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;
