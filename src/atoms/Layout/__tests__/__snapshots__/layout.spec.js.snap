// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Layout /> can create variant via props 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout bordered-buckets"
    id={undefined}
    style={undefined}
/>,
  "nodes": Array [
    <div
      className="layout bordered-buckets"
      id={undefined}
      style={undefined}
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_element": <Layout
      largeCols={Array []}
      mediumCols={Array []}
      smallCols={
            Array [
                  12,
                ]
      }
      variant="bordered-buckets"
      xLargeCols={Array []}
      xxLargeCols={Array []}
/>,
    "_forcedUpdate": false,
    "_instance": null,
    "_newState": null,
    "_rendered": <div
      className="layout bordered-buckets"
      id={undefined}
      style={undefined}
/>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            12,
          ]
    }
    variant="bordered-buckets"
    xLargeCols={Array []}
    xxLargeCols={Array []}
/>,
}
`;

exports[`<Layout /> doesn't wrap Cols in \`<Col>\` 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    id={undefined}
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        className="child"
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    />
</div>,
  "nodes": Array [
    <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            className="child"
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_element": <Layout
      largeCols={Array []}
      mediumCols={Array []}
      smallCols={
            Array [
                  1,
                ]
      }
      xLargeCols={Array []}
      xxLargeCols={Array []}
>
      <div
            className="child"
      />
      <Col
            borderColor="neutral-6"
            className="child"
      />
</Layout>,
    "_forcedUpdate": false,
    "_instance": null,
    "_newState": null,
    "_rendered": <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            className="child"
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      />
</div>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <Col
        borderColor="neutral-6"
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> passes its \`col\` props down to its \`<Col>\` correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout padding"
    id={undefined}
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing="xLarge"
        flex={undefined}
        fullwidth={true}
        largeCols={7}
        mediumCols={6}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing="xLarge"
        flex={undefined}
        fullwidth={true}
        largeCols={5}
        mediumCols={6}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout padding"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing="xLarge"
            flex={undefined}
            fullwidth={true}
            largeCols={7}
            mediumCols={6}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing="xLarge"
            flex={undefined}
            fullwidth={true}
            largeCols={5}
            mediumCols={6}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_element": <Layout
      bottomSpacing="xLarge"
      fullwidth={true}
      largeCols={
            Array [
                  7,
                  5,
                ]
      }
      mediumCols={
            Array [
                  6,
                ]
      }
      padding={true}
      smallCols={
            Array [
                  1,
                ]
      }
      xLargeCols={Array []}
      xxLargeCols={Array []}
>
      <div
            className="child"
      />
      <div
            className="child"
      />
</Layout>,
    "_forcedUpdate": false,
    "_instance": null,
    "_newState": null,
    "_rendered": <div
      className="layout padding"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing="xLarge"
            flex={undefined}
            fullwidth={true}
            largeCols={7}
            mediumCols={6}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing="xLarge"
            flex={undefined}
            fullwidth={true}
            largeCols={5}
            mediumCols={6}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    bottomSpacing="xLarge"
    fullwidth={true}
    largeCols={
        Array [
            7,
            5,
          ]
    }
    mediumCols={
        Array [
            6,
          ]
    }
    padding={true}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> renders correctly 1`] = `
<div
  className="layout"
  id={undefined}
  style={undefined}
/>
`;

exports[`<Layout /> renders its children 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    id={undefined}
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="some-child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="some-child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_element": <Layout
      largeCols={Array []}
      mediumCols={Array []}
      smallCols={
            Array [
                  1,
                ]
      }
      xLargeCols={Array []}
      xxLargeCols={Array []}
>
      <div
            className="child"
      />
      <div
            className="some-child"
      />
      <div
            className="child"
      />
</Layout>,
    "_forcedUpdate": false,
    "_instance": null,
    "_newState": null,
    "_rendered": <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="some-child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="some-child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> wraps its child \`<Col>\` with column sizes 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    id={undefined}
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={7}
        mediumCols={undefined}
        smallCols={12}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={5}
        mediumCols={undefined}
        smallCols={12}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={7}
            mediumCols={undefined}
            smallCols={12}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={5}
            mediumCols={undefined}
            smallCols={12}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_element": <Layout
      largeCols={
            Array [
                  7,
                  5,
                ]
      }
      mediumCols={Array []}
      smallCols={
            Array [
                  12,
                ]
      }
      xLargeCols={Array []}
      xxLargeCols={Array []}
>
      <div
            className="child"
      />
      <div
            className="child"
      />
</Layout>,
    "_forcedUpdate": false,
    "_instance": null,
    "_newState": null,
    "_rendered": <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={7}
            mediumCols={undefined}
            smallCols={12}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={5}
            mediumCols={undefined}
            smallCols={12}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={
        Array [
            7,
            5,
          ]
    }
    mediumCols={Array []}
    smallCols={
        Array [
            12,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> wraps its child \`<Col>\` with column sizes 2`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    id={undefined}
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={3}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="one-off"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={3}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="one-off"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_element": <Layout
      largeCols={Array []}
      mediumCols={Array []}
      smallCols={
            Array [
                  1,
                ]
      }
      xLargeCols={Array []}
      xxLargeCols={Array []}
>
      <div
            className="child"
      />
      <Col
            borderColor="neutral-6"
            smallCols={3}
      >
            <div
                  className="one-off"
            />
      </Col>
      <div
            className="child"
      />
</Layout>,
    "_forcedUpdate": false,
    "_instance": null,
    "_newState": null,
    "_rendered": <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={3}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="one-off"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <Col
        borderColor="neutral-6"
        smallCols={3}
    >
        <div
            className="one-off"
        />
    </Col>
    <div
        className="child"
    />
</Layout>,
}
`;

exports[`<Layout /> wraps its children in \`<Col>\` 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="layout"
    id={undefined}
    style={undefined}
>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
    <Col
        borderColor="neutral-6"
        bottomSpacing={undefined}
        flex={undefined}
        fullwidth={undefined}
        largeCols={undefined}
        mediumCols={undefined}
        smallCols={1}
        xLargeCols={undefined}
        xxLargeCols={undefined}
    >
        <div
            className="child"
        />
    </Col>
</div>,
  "nodes": Array [
    <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_element": <Layout
      largeCols={Array []}
      mediumCols={Array []}
      smallCols={
            Array [
                  1,
                ]
      }
      xLargeCols={Array []}
      xxLargeCols={Array []}
>
      <div
            className="child"
      />
      <div
            className="child"
      />
      <div
            className="child"
      />
</Layout>,
    "_forcedUpdate": false,
    "_instance": null,
    "_newState": null,
    "_rendered": <div
      className="layout"
      id={undefined}
      style={undefined}
>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
      <Col
            borderColor="neutral-6"
            bottomSpacing={undefined}
            flex={undefined}
            fullwidth={undefined}
            largeCols={undefined}
            mediumCols={undefined}
            smallCols={1}
            xLargeCols={undefined}
            xxLargeCols={undefined}
      >
            <div
                  className="child"
            />
      </Col>
</div>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Layout
    largeCols={Array []}
    mediumCols={Array []}
    smallCols={
        Array [
            1,
          ]
    }
    xLargeCols={Array []}
    xxLargeCols={Array []}
>
    <div
        className="child"
    />
    <div
        className="child"
    />
    <div
        className="child"
    />
</Layout>,
}
`;
